version: '3.8'

# Define a project name explicitly to prevent folder influence
name: dms_project

services:
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"  # Publicly expose port 80 for the frontend
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf  # Mount NGINX configuration
    depends_on:
      - web-app
      - web-api
    networks:
      - dms_network
    restart: unless-stopped

  web-app:
    image: dms_project-web-app
    container_name: web-app
    build:
      context: .
      dockerfile: WebUI/Dockerfile
    environment:
      - ASPNETCORE_URLS=http://0.0.0.0:3000  # Ensure the app binds to all interfaces on port 3000
    expose:
      - "3000"  # Expose port 3000 for internal Docker network communication
    depends_on:
      - postgres  # PostgreSQL should be up before starting web-app
    networks:
      - dms_network
    restart: unless-stopped

  web-api:
    image: dms_project-web-api
    container_name: web-api
    build:
      context: .
      dockerfile: DMSystem/Dockerfile
    environment:
      - ASPNETCORE_URLS=http://0.0.0.0:5000
    volumes:
      - shared-config:/app/config  # Use shared volume for appsettings.json
      - ./DMSystem/log4net.config:/app/log4net.config
      - ./DMSystem/Logs:/app/Logs
    expose:
      - "5000"
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - dms_network
    restart: unless-stopped

  ocr-worker:
    image: dms_project-ocr-worker
    container_name: ocr-worker
    build:
      context: .
      dockerfile: DMSystem.OCRWorker/Dockerfile
    environment:
      - TESSDATA_PREFIX=/app/tessdata
      - OCR_PDF_STORAGE=/data/pdf_storage
    volumes:
      - shared-config:/app/config  # Use shared volume for appsettings.json
      - ./pdf_storage:/data/pdf_storage  # Mount volume for PDF storage
      - ./DMSystem.OCRWorker/tessdata:/app/tessdata  # Ensure tessdata is available
    depends_on:
      - rabbitmq
      - web-api
      - postgres
    networks:
      - dms_network
    restart: unless-stopped

  postgres:
    image: postgis/postgis:15-3.3
    container_name: postgres
    environment:
      POSTGRES_USER: groupb
      POSTGRES_PASSWORD: testtest
      POSTGRES_DB: dm_system
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres  # Persist database data
    expose:
      - "5432"  # Expose PostgreSQL port internally
    networks:
      - dms_network
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: groupb
      RABBITMQ_DEFAULT_PASS: testtest
    ports:
      - "8081:15672"  # Management UI port
      - "5672:5672"   # AMQP port for application
    networks:
      - dms_network
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4:6.18
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: pgadmin4@pgadmin.org
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"  # Expose pgAdmin web interface
    volumes:
      - pgadmin:/var/lib/pgadmin
    depends_on:
      - postgres  # Ensure PostgreSQL is up before starting pgAdmin
    networks:
      - dms_network
    restart: unless-stopped

networks:
  dms_network:
    name: dms_network
    driver: bridge

volumes:
  shared-config:  # Shared volume for appsettings.json
  postgres:
  pgadmin:
  pdf_storage:
